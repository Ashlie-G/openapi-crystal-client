# #defaultTitle
#
##defaultDescription
#
#The version of the OpenAPI document: 0.1
#
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 5.0.1
#

require "uri"

module
  class DefaultApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # All repos for an org
    # @param org [String] 
    # @return [nil]
    def orgs_org_repos_get(org : String)
      orgs_org_repos_get_with_http_info(org)
      nil
    end

    # All repos for an org
    # @param org [String] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def orgs_org_repos_get_with_http_info(org : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.orgs_org_repos_get ..."}
      end
      # verify the required parameter "org" is set
      if @api_client.config.client_side_validation && org.nil?
        raise ArgumentError.new("Missing the required parameter 'org' when calling DefaultApi.orgs_org_repos_get")
      end
      # resource path
      local_var_path = "/orgs/{org}/repos".sub("{" + "org" + "}", URI.encode(org.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.orgs_org_repos_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#orgs_org_repos_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # All assignees to an org repo
    # @param org [String] 
    # @param repo [String] 
    # @return [nil]
    def repos_org_repo_assignees_get(org : String, repo : String)
      repos_org_repo_assignees_get_with_http_info(org, repo)
      nil
    end

    # All assignees to an org repo
    # @param org [String] 
    # @param repo [String] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def repos_org_repo_assignees_get_with_http_info(org : String, repo : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.repos_org_repo_assignees_get ..."}
      end
      # verify the required parameter "org" is set
      if @api_client.config.client_side_validation && org.nil?
        raise ArgumentError.new("Missing the required parameter 'org' when calling DefaultApi.repos_org_repo_assignees_get")
      end
      # verify the required parameter "repo" is set
      if @api_client.config.client_side_validation && repo.nil?
        raise ArgumentError.new("Missing the required parameter 'repo' when calling DefaultApi.repos_org_repo_assignees_get")
      end
      # resource path
      local_var_path = "/repos/{org}/{repo}/assignees".sub("{" + "org" + "}", URI.encode(org.to_s)).sub("{" + "repo" + "}", URI.encode(repo.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.repos_org_repo_assignees_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#repos_org_repo_assignees_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # All commits on an org repo
    # @param org [String] 
    # @param repo [String] 
    # @return [nil]
    def repos_org_repo_commits_get(org : String, repo : String)
      repos_org_repo_commits_get_with_http_info(org, repo)
      nil
    end

    # All commits on an org repo
    # @param org [String] 
    # @param repo [String] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def repos_org_repo_commits_get_with_http_info(org : String, repo : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.repos_org_repo_commits_get ..."}
      end
      # verify the required parameter "org" is set
      if @api_client.config.client_side_validation && org.nil?
        raise ArgumentError.new("Missing the required parameter 'org' when calling DefaultApi.repos_org_repo_commits_get")
      end
      # verify the required parameter "repo" is set
      if @api_client.config.client_side_validation && repo.nil?
        raise ArgumentError.new("Missing the required parameter 'repo' when calling DefaultApi.repos_org_repo_commits_get")
      end
      # resource path
      local_var_path = "/repos/{org}/{repo}/commits".sub("{" + "org" + "}", URI.encode(org.to_s)).sub("{" + "repo" + "}", URI.encode(repo.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.repos_org_repo_commits_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#repos_org_repo_commits_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # all issue events on org repo
    # @param org [String] 
    # @param repo [String] 
    # @return [nil]
    def repos_org_repo_issues_events_get(org : String, repo : String)
      repos_org_repo_issues_events_get_with_http_info(org, repo)
      nil
    end

    # all issue events on org repo
    # @param org [String] 
    # @param repo [String] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def repos_org_repo_issues_events_get_with_http_info(org : String, repo : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.repos_org_repo_issues_events_get ..."}
      end
      # verify the required parameter "org" is set
      if @api_client.config.client_side_validation && org.nil?
        raise ArgumentError.new("Missing the required parameter 'org' when calling DefaultApi.repos_org_repo_issues_events_get")
      end
      # verify the required parameter "repo" is set
      if @api_client.config.client_side_validation && repo.nil?
        raise ArgumentError.new("Missing the required parameter 'repo' when calling DefaultApi.repos_org_repo_issues_events_get")
      end
      # resource path
      local_var_path = "/repos/{org}/{repo}/issues/events".sub("{" + "org" + "}", URI.encode(org.to_s)).sub("{" + "repo" + "}", URI.encode(repo.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.repos_org_repo_issues_events_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#repos_org_repo_issues_events_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Get issues for org repo
    # @param org [String] 
    # @param repo [String] 
    # @return [nil]
    def repos_org_repo_issues_get(org : String, repo : String)
      repos_org_repo_issues_get_with_http_info(org, repo)
      nil
    end

    # Get issues for org repo
    # @param org [String] 
    # @param repo [String] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def repos_org_repo_issues_get_with_http_info(org : String, repo : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.repos_org_repo_issues_get ..."}
      end
      # verify the required parameter "org" is set
      if @api_client.config.client_side_validation && org.nil?
        raise ArgumentError.new("Missing the required parameter 'org' when calling DefaultApi.repos_org_repo_issues_get")
      end
      # verify the required parameter "repo" is set
      if @api_client.config.client_side_validation && repo.nil?
        raise ArgumentError.new("Missing the required parameter 'repo' when calling DefaultApi.repos_org_repo_issues_get")
      end
      # resource path
      local_var_path = "/repos/{org}/{repo}/issues".sub("{" + "org" + "}", URI.encode(org.to_s)).sub("{" + "repo" + "}", URI.encode(repo.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.repos_org_repo_issues_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#repos_org_repo_issues_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Events on org repo issue
    # @param org [String] 
    # @param repo [String] 
    # @param issue_number [Int32] 
    # @return [String]
    def repos_org_repo_issues_issue_number_events_get(org : String, repo : String, issue_number : Int32)
      data, _status_code, _headers = repos_org_repo_issues_issue_number_events_get_with_http_info(org, repo, issue_number)
      data
    end

    # Events on org repo issue
    # @param org [String] 
    # @param repo [String] 
    # @param issue_number [Int32] 
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def repos_org_repo_issues_issue_number_events_get_with_http_info(org : String, repo : String, issue_number : Int32)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.repos_org_repo_issues_issue_number_events_get ..."}
      end
      # verify the required parameter "org" is set
      if @api_client.config.client_side_validation && org.nil?
        raise ArgumentError.new("Missing the required parameter 'org' when calling DefaultApi.repos_org_repo_issues_issue_number_events_get")
      end
      # verify the required parameter "repo" is set
      if @api_client.config.client_side_validation && repo.nil?
        raise ArgumentError.new("Missing the required parameter 'repo' when calling DefaultApi.repos_org_repo_issues_issue_number_events_get")
      end
      # verify the required parameter "issue_number" is set
      if @api_client.config.client_side_validation && issue_number.nil?
        raise ArgumentError.new("Missing the required parameter 'issue_number' when calling DefaultApi.repos_org_repo_issues_issue_number_events_get")
      end
      # resource path
      local_var_path = "/repos/{org}/{repo}/issues/{issue_number}/events".sub("{" + "org" + "}", URI.encode(org.to_s)).sub("{" + "repo" + "}", URI.encode(repo.to_s)).sub("{" + "issue_number" + "}", URI.encode(issue_number.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json; charset=utf-8"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "String"

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.repos_org_repo_issues_issue_number_events_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#repos_org_repo_issues_issue_number_events_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return String.from_json(data), status_code, headers
    end

    # Get timeline of org repo issue
    # @param org [String] 
    # @param repo [String] 
    # @param issue_number [Int32] 
    # @return [String]
    def repos_org_repo_issues_issue_number_timeline_get(org : String, repo : String, issue_number : Int32)
      data, _status_code, _headers = repos_org_repo_issues_issue_number_timeline_get_with_http_info(org, repo, issue_number)
      data
    end

    # Get timeline of org repo issue
    # @param org [String] 
    # @param repo [String] 
    # @param issue_number [Int32] 
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def repos_org_repo_issues_issue_number_timeline_get_with_http_info(org : String, repo : String, issue_number : Int32)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.repos_org_repo_issues_issue_number_timeline_get ..."}
      end
      # verify the required parameter "org" is set
      if @api_client.config.client_side_validation && org.nil?
        raise ArgumentError.new("Missing the required parameter 'org' when calling DefaultApi.repos_org_repo_issues_issue_number_timeline_get")
      end
      # verify the required parameter "repo" is set
      if @api_client.config.client_side_validation && repo.nil?
        raise ArgumentError.new("Missing the required parameter 'repo' when calling DefaultApi.repos_org_repo_issues_issue_number_timeline_get")
      end
      # verify the required parameter "issue_number" is set
      if @api_client.config.client_side_validation && issue_number.nil?
        raise ArgumentError.new("Missing the required parameter 'issue_number' when calling DefaultApi.repos_org_repo_issues_issue_number_timeline_get")
      end
      # resource path
      local_var_path = "/repos/{org}/{repo}/issues/{issue_number}/timeline".sub("{" + "org" + "}", URI.encode(org.to_s)).sub("{" + "repo" + "}", URI.encode(repo.to_s)).sub("{" + "issue_number" + "}", URI.encode(issue_number.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json; charset=utf-8"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "String"

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.repos_org_repo_issues_issue_number_timeline_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#repos_org_repo_issues_issue_number_timeline_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return String.from_json(data), status_code, headers
    end

    # All labels on an org repo
    # @param org [String] 
    # @param repo [String] 
    # @return [nil]
    def repos_org_repo_labels_get(org : String, repo : String)
      repos_org_repo_labels_get_with_http_info(org, repo)
      nil
    end

    # All labels on an org repo
    # @param org [String] 
    # @param repo [String] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def repos_org_repo_labels_get_with_http_info(org : String, repo : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.repos_org_repo_labels_get ..."}
      end
      # verify the required parameter "org" is set
      if @api_client.config.client_side_validation && org.nil?
        raise ArgumentError.new("Missing the required parameter 'org' when calling DefaultApi.repos_org_repo_labels_get")
      end
      # verify the required parameter "repo" is set
      if @api_client.config.client_side_validation && repo.nil?
        raise ArgumentError.new("Missing the required parameter 'repo' when calling DefaultApi.repos_org_repo_labels_get")
      end
      # resource path
      local_var_path = "/repos/{org}/{repo}/labels".sub("{" + "org" + "}", URI.encode(org.to_s)).sub("{" + "repo" + "}", URI.encode(repo.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.repos_org_repo_labels_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#repos_org_repo_labels_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Get all milestones for org repo
    # @param org [String] 
    # @param repo [String] 
    # @return [nil]
    def repos_org_repo_milestones_get(org : String, repo : String)
      repos_org_repo_milestones_get_with_http_info(org, repo)
      nil
    end

    # Get all milestones for org repo
    # @param org [String] 
    # @param repo [String] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def repos_org_repo_milestones_get_with_http_info(org : String, repo : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.repos_org_repo_milestones_get ..."}
      end
      # verify the required parameter "org" is set
      if @api_client.config.client_side_validation && org.nil?
        raise ArgumentError.new("Missing the required parameter 'org' when calling DefaultApi.repos_org_repo_milestones_get")
      end
      # verify the required parameter "repo" is set
      if @api_client.config.client_side_validation && repo.nil?
        raise ArgumentError.new("Missing the required parameter 'repo' when calling DefaultApi.repos_org_repo_milestones_get")
      end
      # resource path
      local_var_path = "/repos/{org}/{repo}/milestones".sub("{" + "org" + "}", URI.encode(org.to_s)).sub("{" + "repo" + "}", URI.encode(repo.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.repos_org_repo_milestones_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#repos_org_repo_milestones_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # All pull requests on org repo
    # @param org [String] 
    # @param repo [String] 
    # @return [nil]
    def repos_org_repo_pulls_get(org : String, repo : String)
      repos_org_repo_pulls_get_with_http_info(org, repo)
      nil
    end

    # All pull requests on org repo
    # @param org [String] 
    # @param repo [String] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def repos_org_repo_pulls_get_with_http_info(org : String, repo : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.repos_org_repo_pulls_get ..."}
      end
      # verify the required parameter "org" is set
      if @api_client.config.client_side_validation && org.nil?
        raise ArgumentError.new("Missing the required parameter 'org' when calling DefaultApi.repos_org_repo_pulls_get")
      end
      # verify the required parameter "repo" is set
      if @api_client.config.client_side_validation && repo.nil?
        raise ArgumentError.new("Missing the required parameter 'repo' when calling DefaultApi.repos_org_repo_pulls_get")
      end
      # resource path
      local_var_path = "/repos/{org}/{repo}/pulls".sub("{" + "org" + "}", URI.encode(org.to_s)).sub("{" + "repo" + "}", URI.encode(repo.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.repos_org_repo_pulls_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#repos_org_repo_pulls_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Reviews on org repo pull request
    # @param org [String] 
    # @param repo [String] 
    # @param pull_number [Int32] 
    # @return [String]
    def repos_org_repo_pulls_pull_number_reviews_get(org : String, repo : String, pull_number : Int32)
      data, _status_code, _headers = repos_org_repo_pulls_pull_number_reviews_get_with_http_info(org, repo, pull_number)
      data
    end

    # Reviews on org repo pull request
    # @param org [String] 
    # @param repo [String] 
    # @param pull_number [Int32] 
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def repos_org_repo_pulls_pull_number_reviews_get_with_http_info(org : String, repo : String, pull_number : Int32)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.repos_org_repo_pulls_pull_number_reviews_get ..."}
      end
      # verify the required parameter "org" is set
      if @api_client.config.client_side_validation && org.nil?
        raise ArgumentError.new("Missing the required parameter 'org' when calling DefaultApi.repos_org_repo_pulls_pull_number_reviews_get")
      end
      # verify the required parameter "repo" is set
      if @api_client.config.client_side_validation && repo.nil?
        raise ArgumentError.new("Missing the required parameter 'repo' when calling DefaultApi.repos_org_repo_pulls_pull_number_reviews_get")
      end
      # verify the required parameter "pull_number" is set
      if @api_client.config.client_side_validation && pull_number.nil?
        raise ArgumentError.new("Missing the required parameter 'pull_number' when calling DefaultApi.repos_org_repo_pulls_pull_number_reviews_get")
      end
      # resource path
      local_var_path = "/repos/{org}/{repo}/pulls/{pull_number}/reviews".sub("{" + "org" + "}", URI.encode(org.to_s)).sub("{" + "repo" + "}", URI.encode(repo.to_s)).sub("{" + "pull_number" + "}", URI.encode(pull_number.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json; charset=utf-8"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "String"

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.repos_org_repo_pulls_pull_number_reviews_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#repos_org_repo_pulls_pull_number_reviews_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return String.from_json(data), status_code, headers
    end

    # Contributor stats on org repo
    # @param org [String] 
    # @param repo [String] 
    # @return [String]
    def repos_org_repo_stats_contributors_get(org : String, repo : String)
      data, _status_code, _headers = repos_org_repo_stats_contributors_get_with_http_info(org, repo)
      data
    end

    # Contributor stats on org repo
    # @param org [String] 
    # @param repo [String] 
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def repos_org_repo_stats_contributors_get_with_http_info(org : String, repo : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.repos_org_repo_stats_contributors_get ..."}
      end
      # verify the required parameter "org" is set
      if @api_client.config.client_side_validation && org.nil?
        raise ArgumentError.new("Missing the required parameter 'org' when calling DefaultApi.repos_org_repo_stats_contributors_get")
      end
      # verify the required parameter "repo" is set
      if @api_client.config.client_side_validation && repo.nil?
        raise ArgumentError.new("Missing the required parameter 'repo' when calling DefaultApi.repos_org_repo_stats_contributors_get")
      end
      # resource path
      local_var_path = "/repos/{org}/{repo}/stats/contributors".sub("{" + "org" + "}", URI.encode(org.to_s)).sub("{" + "repo" + "}", URI.encode(repo.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json; charset=utf-8"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "String"

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.repos_org_repo_stats_contributors_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#repos_org_repo_stats_contributors_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return String.from_json(data), status_code, headers
    end
  end
end
